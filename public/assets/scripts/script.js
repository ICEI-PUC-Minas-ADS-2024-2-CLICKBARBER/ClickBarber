const agendaData = [
  {
    nome: "Gabriel Fonseca Diniz",
    foto: "../public/assets/img/barbeiro.jpg",
    dias: {
      "2025-10-18": [
        { hora: "08:00", cliente: "Jo√£o Silva", servico: "Corte de cabelo" },
        { hora: "09:50", cliente: "Marcos Pereira", servico: "Barba completa" }
      ]
    }
  },
  {
    nome: "Junior Lucas Gusman",
    foto: "../public/assets/img/barbeiro2.jpg",
    dias: {
      "2025-10-18": [
        { hora: "07:30", cliente: "Carlos Lima", servico: "Corte social" }
      ]
    }
  },
  {
    nome: "Daniel Lopes Salom√©",
    foto: "../public/assets/img/barbeiro3.jpg",
    dias: {
      "2025-10-18": [
        { hora: "08:45", cliente: "Rafael Melo", servico: "Corte degrad√™" },
        { hora: "10:15", cliente: "Pedro Oliveira", servico: "Barba e sobrancelha" }
      ]
    }
  }
];

// --- REFER√äNCIAS A ELEMENTOS DO DOM ---

// Container principal onde toda a agenda (barbeiros, datas e hor√°rios) ser√° renderizada
const agendaContainer = document.getElementById("agenda");

// --- FILTROS ---
const filtroBarbeiro = document.getElementById("filtroBarbeiro"); // Select de filtro de barbeiros
const filtroData = document.getElementById("filtroData");         // Input de filtro por data
const btnFiltrar = document.getElementById("btnFiltrar");         // Bot√£o para aplicar os filtros
const btnLimpar = document.getElementById("btnLimpar");           // Bot√£o para limpar os filtros e mostrar tudo

// --- MODAL DE STATUS ---
// Elementos relacionados ao modal que exibe e atualiza o status dos agendamentos
const modal = document.getElementById("modalStatus");             // Container principal do modal
const modalCliente = document.getElementById("modalCliente");     // Exibe o nome do cliente no modal
const btnChegou = document.getElementById("btnChegou");           // Bot√£o "Cliente chegou"
const btnFaltou = document.getElementById("btnFaltou");           // Bot√£o "Cliente faltou"
const btnCancelar = document.getElementById("btnCancelar");       // Bot√£o "Cancelar" (fecha o modal)


let modalDados = {}; // guarda informa√ß√µes do cliente clicado

// --- PREENCHER OS SELECTS DE BARBEIRO ---
// Esta fun√ß√£o atualiza automaticamente as listas suspensas (select)
// de barbeiros usados nos filtros e no formul√°rio de agendamento.
function preencherSelects() {
  // Define o conte√∫do inicial do select de filtro (mostra "Todos os barbeiros")
  filtroBarbeiro.innerHTML = '<option value="">Todos os barbeiros</option>';
  // Define o conte√∫do inicial do select de agendamento (mostra "Selecione o barbeiro")
  document.getElementById("barbeiroSelect").innerHTML = '<option value="">Selecione o barbeiro</option>';
  
  // Percorre todos os barbeiros cadastrados na agenda
  agendaData.forEach(b => {
    // Cria um elemento <option> para representar o barbeiro no select
    const option = document.createElement("option");
    option.value = b.nome;        // O valor interno da op√ß√£o ser√° o nome do barbeiro
    option.textContent = b.nome;  // O texto exibido tamb√©m ser√° o nome do barbeiro

    // Adiciona a op√ß√£o ao select usado nos filtros da agenda
    filtroBarbeiro.appendChild(option);

    // Clona a mesma op√ß√£o para o select do formul√°rio de agendamento
    // (necess√°rio porque um mesmo elemento n√£o pode estar em dois lugares do DOM)
    const opt2 = option.cloneNode(true);
    document.getElementById("barbeiroSelect").appendChild(opt2);
  });
}

// Renderiza a agenda

// aplicando filtros opcionais por barbeiro (nome) e/ou data espec√≠fica.
function renderAgenda(filtroNome = "", filtroDia = "") {
  agendaContainer.innerHTML = "";

  // Percorre a lista completa de barbeiros cadastrados na vari√°vel "agendaData"
  agendaData.forEach(barbeiro => {
    if (filtroNome && barbeiro.nome !== filtroNome) return;

    const section = document.createElement("div");
    section.classList.add("barbeiro");
    // Monta o conte√∫do HTML da se√ß√£o do barbeiro
    section.innerHTML = `
      <img src="${barbeiro.foto}" alt="${barbeiro.nome}">
      <div class="info">
        <h2>${barbeiro.nome}</h2>
        ${Object.entries(barbeiro.dias)
          .filter(([data]) => !filtroDia || data === filtroDia)
          .map(([data, horarios]) => {
              // Ordena os hor√°rios do dia
              // Converte o hor√°rio para n√∫mero (em milissegundos) e ordena de forma crescente
              horarios.sort((a, b) => {
                const horaA = new Date(`1970-01-01T${a.hora}:00`).getTime();
                const horaB = new Date(`1970-01-01T${b.hora}:00`).getTime();
                return horaA - horaB;
              });

              // Retorna o bloco HTML que representa os hor√°rios de um dia espec√≠fico
              return `
                <div class="dia">
                  <strong>${new Date(data).toLocaleDateString("pt-BR")}</strong>
                  ${horarios.map((h, index) => `
                    <div class="horario ${h.status || ""}">
                      <div>${h.hora}</div>
                      <div class="cliente-nome" data-barbeiro="${barbeiro.nome}" data-data="${data}" data-index="${index}">
                        ${h.cliente}
                      </div>
                      <div>${h.servico}</div>
                      <button class="btn-remover" data-barbeiro="${barbeiro.nome}" data-data="${data}" data-index="${index}">üóëÔ∏è</button>
                    </div>
                  `).join("")}
                </div>
              `;
          }).join("")}
      </div>
    `;
    agendaContainer.appendChild(section);
  });

  // Event listeners para abrir modal
  document.querySelectorAll(".cliente-nome").forEach(cliente => {
    cliente.addEventListener("click", e => {
      abrirModal(
        e.target.dataset.barbeiro,
        e.target.dataset.data,
        e.target.dataset.index
      );
    });
  });

  // Event listeners para remover agendamento
  document.querySelectorAll(".btn-remover").forEach(botao => {
    botao.addEventListener("click", e => {
      removerAgendamento(
        e.target.dataset.barbeiro,
        e.target.dataset.data,
        e.target.dataset.index
      );
    });
  });
}

// --- MODAL ---
// Fun√ß√£o respons√°vel por abrir o modal com informa√ß√µes de um agendamento espec√≠fico
function abrirModal(nomeBarbeiro, data, index) {
  // Localiza o barbeiro correspondente dentro do array "agendaData"
  const barbeiro = agendaData.find(b => b.nome === nomeBarbeiro);
  // Se o barbeiro, a data ou o √≠ndice do agendamento n√£o existirem, a fun√ß√£o √© interrompida
  if (!barbeiro || !barbeiro.dias[data] || !barbeiro.dias[data][index]) return;
  // Guarda temporariamente os dados do agendamento aberto no modal (para uso posterior)
  modalDados = { nomeBarbeiro, data, index };
  // Exibe o nome do cliente no modal
  modalCliente.textContent = `Cliente: ${barbeiro.dias[data][index].cliente}`;
  // Torna o modal vis√≠vel na tela
  modal.style.display = "flex";
}
// Fun√ß√£o simples para fechar o modal (ocultar da tela)
function fecharModal() {
  modal.style.display = "none";
}
// Fun√ß√£o que atualiza o status de um agendamento atrav√©s do modal
function atualizarStatusModal(status) {
  // Recupera as informa√ß√µes armazenadas anteriormente quando o modal foi aberto
  const { nomeBarbeiro, data, index } = modalDados;
  // Encontra novamente o barbeiro correspondente na agenda
  const barbeiro = agendaData.find(b => b.nome === nomeBarbeiro);
  // Verifica se os dados do agendamento s√£o v√°lidos antes de prosseguir
  if (!barbeiro || !barbeiro.dias[data] || !barbeiro.dias[data][index]) return;
  // Atualiza o status do agendamento (por exemplo: "conclu√≠do", "cancelado", etc.)
  barbeiro.dias[data][index].status = status;

  // Fecha o modal ap√≥s a atualiza√ß√£o
  fecharModal();
  // Recarrega/renderiza novamente a agenda na tela para refletir a altera√ß√£o
  renderAgenda();
}


// --- EVENTOS DO MODAL ---

// Quando o cliente chega, atualiza o status do agendamento para "chegou"
btnChegou.addEventListener("click", () => atualizarStatusModal("chegou"));
// Quando o cliente falta, atualiza o status do agendamento para "faltou"
btnFaltou.addEventListener("click", () => atualizarStatusModal("faltou"));
// Bot√£o para cancelar/fechar o modal manualmente
btnCancelar.addEventListener("click", fecharModal);
// Fecha o modal se o usu√°rio clicar fora da √°rea do conte√∫do (no fundo escuro)
modal.addEventListener("click", e => {
  if (e.target === modal) fecharModal();
});


// --- FILTROS ---

// Ao clicar em "Filtrar", renderiza novamente a agenda com base nos filtros selecionados
btnFiltrar.addEventListener("click", () => 
  renderAgenda(filtroBarbeiro.value, filtroData.value)
);
// Ao clicar em "Limpar", remove os filtros e exibe todos os agendamentos novamente
btnLimpar.addEventListener("click", () => {
  filtroBarbeiro.value = ""; // Limpa o filtro de barbeiro
  filtroData.value = "";     // Limpa o filtro de data
  renderAgenda();            // Recarrega a agenda completa
});


// --- AGENDAMENTOS ---

// Fun√ß√£o respons√°vel por adicionar um novo agendamento √† agenda de um barbeiro
function adicionarAgendamento(nomeBarbeiro, data, hora, cliente, servico) {
  // Localiza o barbeiro correspondente pelo nome dentro do array principal "agendaData"
  const barbeiro = agendaData.find(b => b.nome === nomeBarbeiro);
  if (!barbeiro) return; // Se o barbeiro n√£o for encontrado, encerra a fun√ß√£o
  // Se o barbeiro ainda n√£o tiver nenhum agendamento para a data informada, cria um novo array para ela
  if (!barbeiro.dias[data]) barbeiro.dias[data] = [];
  // Converte a hora do novo agendamento em milissegundos para facilitar c√°lculos de diferen√ßa entre hor√°rios
  const novaHora = new Date(`1970-01-01T${hora}:00`).getTime();
  // Verifica se j√° existe outro agendamento muito pr√≥ximo (menos de 30 minutos de diferen√ßa)
  const conflito = barbeiro.dias[data].some(h => 
    Math.abs(new Date(`1970-01-01T${h.hora}:00`).getTime() - novaHora) < 30 * 60 * 1000
  );
  // Caso exista um conflito de hor√°rio, exibe um alerta e cancela o agendamento
  if (conflito) {
    alert(`‚ö†Ô∏è Hor√°rio muito pr√≥ximo de outro agendamento.`);
    return;
  }
  // Adiciona o novo agendamento √† lista do barbeiro para a data especificada
  barbeiro.dias[data].push({ hora, cliente, servico });
  // Informa o sucesso ao usu√°rio
  alert(`‚úÖ Agendamento adicionado para ${cliente}`);
  // Atualiza a interface da agenda para refletir a nova adi√ß√£o
  renderAgenda();
}

// Fun√ß√£o respons√°vel por remover um agendamento espec√≠fico
function removerAgendamento(nomeBarbeiro, data, index) {
  // Localiza o barbeiro e verifica se h√° agendamentos para a data informada
  const barbeiro = agendaData.find(b => b.nome === nomeBarbeiro);
  if (!barbeiro || !barbeiro.dias[data]) return;
  // Obt√©m o nome do cliente para exibir na confirma√ß√£o
  const cliente = barbeiro.dias[data][index].cliente;
  // Exibe uma caixa de confirma√ß√£o antes de remover o agendamento
  if (confirm(`Remover agendamento de ${cliente}?`)) {
    // Remove o agendamento do array
    barbeiro.dias[data].splice(index, 1);
    // Se a data ficar sem agendamentos, remove a chave correspondente
    if (barbeiro.dias[data].length === 0) delete barbeiro.dias[data];
    // Atualiza a interface da agenda ap√≥s a remo√ß√£o
    renderAgenda();
  }
}


// --- BOT√ÉO "AGENDAR" ---
document.getElementById("btnAgendar").addEventListener("click", () => {
  
  // Captura os valores dos campos do formul√°rio
  const barbeiro = document.getElementById("barbeiroSelect").value; // Nome do barbeiro selecionado
  const data = document.getElementById("dataInput").value;           // Data escolhida
  const hora = document.getElementById("horaInput").value;           // Hor√°rio selecionado
  const cliente = document.getElementById("clienteInput").value;     // Nome do cliente
  const servico = document.getElementById("servicoInput").value;     // Tipo de servi√ßo (ex: corte, barba, etc.)

  // Verifica se todos os campos foram preenchidos antes de prosseguir
  if (!barbeiro || !data || !hora || !cliente || !servico) {
    alert("Preencha todos os campos!"); // Exibe alerta se algum campo estiver vazio
    return; // Interrompe a execu√ß√£o
  }
  // Se todos os campos estiverem preenchidos, chama a fun√ß√£o que adiciona o agendamento
  adicionarAgendamento(barbeiro, data, hora, cliente, servico);
});

// Inicializa√ß√£o
preencherSelects();
renderAgenda();
